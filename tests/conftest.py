import pytest
import numpy as np
from tifffile import imsave
from meshwork.actinimg import ActinImg

""" Instance creation fixtures. """

@pytest.fixture
def random_image():
    forward = np.arange(0, 14)
    backward = forward[::-1]
    im = np.array(
        [
            [*forward, 20, 20, *forward],
            [*forward, 22, 22, *forward],
            [*forward, 26, 26, *forward],
            [*forward, 30, 30, *backward],
            [*forward, 32, 32, *backward],
            [*forward, 32, 32, *backward],
            [*forward, 30, 30, *backward],
            [*backward, 26, 26, *backward],
            [*backward, 22, 22, *backward],
            [*backward, 20, 20, *backward],
        ]
    )
    dims = im.shape
    im = np.repeat(im, 3).reshape(3, *dims)
    return im 

@pytest.fixture
def anActinImg(random_image):
    return ActinImg(random_image, 'test.tiff', random_image.shape[1:3], 3, False) 


""" Data comparison fixtures (original, manipulated). """

@pytest.fixture
def z_proj_im():
    ones = np.ones(5)
    im = np.array([
        [*ones, *ones],
        [*ones, *ones],
        [*ones, *ones],
        [*ones*9, *ones*9],
        [*ones*5, *ones*5],
        [*ones*5, *ones*5],
        [*ones*9, *ones*9],
        [*ones, *ones],
        [*ones, *ones],
        [*ones, *ones]
        ])
    return np.array([im, np.transpose(im)])

@pytest.fixture
def normalise_res():
    return np.array([
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ],
        [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        [1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ]])

@pytest.fixture
def min_proj_res():
    return np.array([
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0.5, 0.5, 0.5, 0.5, 0. , 0. , 0. ],
        [0. , 0. , 0. , 0.5, 0.5, 0.5, 0.5, 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ]])

@pytest.fixture
def max_proj_res():
    return np.array([
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ],
        [0.5, 0.5, 0.5, 1. , 0.5, 0.5, 1. , 0.5, 0.5, 0.5],
        [0.5, 0.5, 0.5, 1. , 0.5, 0.5, 1. , 0.5, 0.5, 0.5],
        [1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ],
        [0. , 0. , 0. , 1. , 0.5, 0.5, 1. , 0. , 0. , 0. ]])

@pytest.fixture
def threshold_max_proj_res():
    return np.array([
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]])

@pytest.fixture
def z_proj_substacks():
    ones = np.ones(5)
    im = np.array([
        [*ones, *ones],
        [*ones, *ones],
        [*ones, *ones],
        [*ones*9, *ones*9],
        [*ones*5, *ones*5],
        [*ones*5, *ones*5],
        [*ones*9, *ones*9],
        [*ones, *ones],
        [*ones, *ones],
        [*ones, *ones]
        ])
    return np.array([im, np.transpose(im), np.arange(100).reshape(10,10)])

@pytest.fixture
def min_grad_res():
    return np.array([
        [0., 0., 0., 0.0303, 0.0404, 0.0505, 0.0606, 0., 0., 0.],
        [0., 0., 0., 0.1313, 0.1414, 0.1515, 0.1616, 0., 0., 0.],
        [0., 0., 0., 0.2323, 0.2424, 0.2525, 0.2626, 0., 0., 0.],
        [0., 0., 0., 0.3333, 0.3434, 0.3535, 0.3636, 0., 0., 0.],
        [0., 0., 0., 0.4343, 0.4444, 0.4545, 0.4646, 0., 0., 0.],
        [0., 0., 0., 0.5354, 0.5, 0.5, 0.5657, 0., 0., 0.],
        [0., 0., 0., 0.6364, 0.5, 0.5, 0.6667, 0., 0., 0.],
        [0., 0., 0., 0.7374, 0.5, 0.5, 0.7677, 0., 0., 0.],
        [0., 0., 0., 0.8384, 0.5, 0.5, 0.8687, 0., 0., 0.],
        [0., 0., 0., 0.9394, 0.5, 0.5, 0.9697, 0., 0., 0.]])


@pytest.fixture
def max_grad_res():
    return np.array([
        [0., 0.0101, 0.0202,     1., 0.5, 0.5,       1., 0.0707, 0.0808, 0.0909],
        [0.101 , 0.1111, 0.1212, 1., 0.5, 0.5,       1., 0.1717, 0.1818, 0.1919],
        [0.202 , 0.2121, 0.2222, 1., 0.5, 0.5,       1., 0.2727, 0.2828, 0.2929],
        [0.303 , 0.3131, 0.3232, 1., 0.5, 0.5,       1., 0.3737, 0.3838, 0.3939],
        [0.404 , 0.4141, 0.4242, 1., 0.5, 0.5,       1., 0.4747, 0.4848, 0.4949],
        [0.5051, 0.5152, 0.5253, 1., 0.5455, 0.5556, 1., 0.5758, 0.5859, 0.596 ],
        [0.6061, 0.6162, 0.6263, 1., 0.6465, 0.6566, 1., 0.6768, 0.6869, 0.697 ],
        [0.7071, 0.7172, 0.7273, 1., 0.7475, 0.7576, 1., 0.7778, 0.7879, 0.798 ],
        [0.8081, 0.8182, 0.8283, 1., 0.8485, 0.8586, 1., 0.8788, 0.8889, 0.899 ],
        [0.9091, 0.9192, 0.9293, 1., 0.9495, 0.9596, 1., 0.9798, 0.9899, 1.    ]])